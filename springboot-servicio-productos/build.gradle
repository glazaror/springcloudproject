plugins {
	id 'org.springframework.boot' version '2.1.7.RELEASE'
	id 'java'
}

apply plugin: 'io.spring.dependency-management'

group = 'com.glazaror.springboot.app.productos'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

repositories {
	mavenLocal()
	mavenCentral()
}

ext {
	set('springCloudVersion', "Greenwich.SR2")
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// dependencia spring cloud discovery eureka client
	implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	
	// dependencia de libreria commons
	implementation group: 'com.glazaror.springboot.app.commons', name: 'springboot-servicio-commons', version: '0.0.1-SNAPSHOT'
	
	// dependencia sleuth para configurar trazabilidad distribuida... quitamos dependencia explicita de sleuth... ya que ya la contiene zipkin
	// implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
	
	// dependencia zipkin (incluye sleuth) para configurar trazabilidad distribuida
	// con esto marcamos nuestro microservicio como cliente
	implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'
	
	// dependencia "spring-boot-starter-amqp" messaging para rabbitmq... para que las trazas distribuidas sean enviadas a zipkin usando el intermediario message broker "rabbitmq"
	// con esta dependencia las trazas son automaticamente enviadas a zipkin usando el intermediario message broker (en este caso rabbitmq)
	// es decir no es necesario ninguna configuracion adicional en los microservicios
	// lo que si tenemos que configurar es el servidor zipkin (el broker, el storage) para que sea un consumidor del message broker (a traves de variables de entorno)
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
}

// gestor de dependencias spring cloud
dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}
